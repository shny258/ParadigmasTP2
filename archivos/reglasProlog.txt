% Calcula el mínimo cociente (lo que limita el número de crafteos)
minimo_crafteos([D/N], Cant) :- Cant is floor(D / N).
minimo_crafteos([D/N | Resto], Cant) :-
    minimo_crafteos(Resto, CantResto),
    Cant is min(floor(D / N), CantResto).


% Verifica si tengo suficientes de todos los ingredientes
puedo_craftear(Objeto, Cantidad, TiempoTotal) :-
    %objetosDisponibles(Objeto),
    receta(Objeto, CantDevuelta, Tiempo),
    (   (ingrediente(Objeto, Ing, _), %Condicion: Si hay algún ingrediente del objeto
	\+tengo(Ing, _))					%Que NO tengo
    ->	(   Cantidad is 0, TiempoTotal is 0) %Pone ambos en 0
    ;   %else
    (   findall(CantDisponible/CantNecesaria,
            (ingrediente(Objeto, Ing, CantNecesaria),
             tengo(Ing, CantDisponible)),
            Cantidades),
    Cantidades \= [], % Debe tener al menos un ingrediente
    minimo_crafteos(Cantidades, CantCrafteos),
    CantCrafteos > 0,
    Cantidad is CantCrafteos * CantDevuelta,
    TiempoTotal is CantCrafteos * Tiempo
    )).

quePuedoCraftear(Objeto, Cantidad, TiempoTotal):- puedo_craftear(Objeto, Cantidad, TiempoTotal), Cantidad>0.